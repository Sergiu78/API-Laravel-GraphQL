"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Can be used as an argument to upload files using https://github.com/jaydenseric/graphql-multipart-request-spec"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Mutation {
  createUser(name: String!, email: String!, password: String!): User
  updateUser(id: ID!, email: String, name: String): User
  deleteUser(id: ID!): DeleteResponse

  "Upload a file that is publicly available."
  upload(file: Upload!): Image
}

type Image {
  id: ID!
  name: String!
  url: String!
  user: User
  created_at: String
  updated_at: String
}

type DeleteResponse {
  status: String!
  message: String!
}
"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!] @paginate(defaultCount: 10)

    ticket(id: ID @eq): Ticket @find
    tickets: [Ticket!] @paginate(defaultCount: 10)

    event(id: ID @eq): Event @find
    events: [Event!] @paginate(defaultCount: 10)
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    tickets: [Ticket!]

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Event {
  id: ID!
  name: String!
  date: String!
}

type Ticket {
  id: ID!
  user: User!
  event: Event!
}
